<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload Audio - HIVE VOX</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/dark-theme.css') }}" rel="stylesheet">
    <style>
        .progress {
            height: 20px;
            margin-bottom: 10px;
            background-color: #2d2d2d;
        }
        .status-container {
            display: none;
            margin-top: 20px;
        }
        .upload-container {
            position: relative;
        }
        .cancel-upload {
            display: none;
            position: absolute;
            right: -40px;
            top: 50%;
            transform: translateY(-50%);
        }
        /* Hexagon Loader Styles */
        :root {
            --bg-primary: #121212;
            --teal-primary: #00bfa5;
            --teal-secondary: #00897b;
            --teal-light: #64ffda;
            --teal-dark: #005b4f;
        }
        .loader-container {
            position: relative;
            width: 100px;
            height: 100px;
            margin: 20px auto 0;
            transform: scale(0.7);
            display: none;
        }
        .loader-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: var(--teal-light);
            font-weight: 500;
            letter-spacing: 1px;
            font-size: 14px;
            text-transform: uppercase;
            opacity: 0.9;
            animation: pulse 2s infinite;
        }
        .hexagon-container {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 100px;
            height: 100px;
            animation: rotate 12s linear infinite;
        }
        @keyframes rotate {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }
        .hexagon {
            position: absolute;
            width: 100%;
            height: 100%;
            transform-origin: center;
        }
        .hexagon:nth-child(1) { animation: pulse-scale 3s ease-in-out infinite; }
        .hexagon:nth-child(2) {
            transform: scale(0.8);
            animation: pulse-scale 3s ease-in-out infinite 0.5s;
        }
        .hexagon:nth-child(3) {
            transform: scale(0.6);
            animation: pulse-scale 3s ease-in-out infinite 1s;
        }
        @keyframes pulse-scale {
            0% { transform: scale(1); }
            50% { transform: scale(0.9); }
            100% { transform: scale(1); }
        }
        .hexagon svg { width: 100%; height: 100%; }
        .hexagon-progress {
            stroke-dasharray: 240;
            stroke-dashoffset: 240;
            animation: progress 3s linear infinite;
        }
        @keyframes progress {
            0% { stroke-dashoffset: 240; }
            100% { stroke-dashoffset: 0; }
        }
        .hexagon-outer {
            filter: drop-shadow(0 0 8px var(--teal-light));
            opacity: 0.7;
            animation: glow 4s ease-in-out infinite;
        }
        @keyframes glow {
            0% { filter: drop-shadow(0 0 5px var(--teal-light)); opacity: 0.5; }
            50% { filter: drop-shadow(0 0 15px var(--teal-light)); opacity: 0.8; }
            100% { filter: drop-shadow(0 0 5px var(--teal-light)); opacity: 0.5; }
        }
        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }
        /* Make form-text lighter */
        .form-text {
            color: #aaaaaa !important;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">HIVE VOX <span class="version">v0.2</span></a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard">Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/upload">Upload</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/record">Record</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Upload Audio File</h5>
                    </div>
                    <div class="card-body">
                        <form id="uploadForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="file" class="form-label">Choose an audio file</label>
                                <div class="upload-container">
                                    <input type="file" class="form-control" id="file" name="file" accept="audio/*" required>
                                    <button type="button" class="btn btn-danger btn-sm cancel-upload" id="cancelUpload">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                                <div class="form-text">Supported formats: MP3, WAV, M4A, WEBM</div>
                                <div class="form-text">Maximum file size: 300MB</div>
                            </div>
                            <button type="submit" class="btn btn-primary" id="uploadButton">Upload and Analyze</button>
                        </form>

                        <!-- Progress and Status Container -->
                        <div class="status-container" id="statusContainer">
                            <h6 class="mb-2">Upload Progress</h6>
                            <div class="progress mb-3">
                                <div class="progress-bar" id="uploadProgress" role="progressbar" style="width: 0%" 
                                     aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                            </div>
                            
                            <div id="processingStatus" style="display: none;">
                                <h6 class="mb-2">Processing Status</h6>
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         id="processingProgress" role="progressbar" style="width: 0%"
                                         aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                                </div>
                                <p class="text-muted mt-2 mb-0" id="processingMessage">Initializing...</p>
                                
                                <!-- Hexagon Loader -->
                                <div class="loader-container" id="hexagonLoader" style="display: none;">
                                    <div class="hexagon-container">
                                        <div class="hexagon hexagon-outer">
                                            <svg viewBox="0 0 100 100">
                                                <polygon points="50,3 97,26.5 97,73.5 50,97 3,73.5 3,26.5" fill="none" stroke="#00bfa5" stroke-width="2"></polygon>
                                            </svg>
                                        </div>
                                        <div class="hexagon">
                                            <svg viewBox="0 0 100 100">
                                                <polygon points="50,3 97,26.5 97,73.5 50,97 3,73.5 3,26.5" fill="none" stroke="#00bfa5" stroke-width="1.5"></polygon>
                                                <polygon points="50,15 85,32 85,68 50,85 15,68 15,32" fill="none" stroke="#64ffda" stroke-width="1" stroke-dasharray="2,2"></polygon>
                                            </svg>
                                        </div>
                                        <div class="hexagon">
                                            <svg viewBox="0 0 100 100">
                                                <polygon class="hexagon-progress" points="50,30 75,42.5 75,67.5 50,80 25,67.5 25,42.5" fill="none" stroke="#64ffda" stroke-width="2"></polygon>
                                                <circle cx="50" cy="50" r="8" fill="#00bfa5"></circle>
                                            </svg>
                                        </div>
                                    </div>
                                    <div class="loader-text">Processing</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById('uploadForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const fileInput = document.getElementById('file');
            const file = fileInput.files[0];
            if (!file) return;

            // Show status container and cancel button
            document.getElementById('statusContainer').style.display = 'block';
            document.getElementById('cancelUpload').style.display = 'block';
            document.getElementById('uploadButton').disabled = true;

            // Create FormData
            const formData = new FormData();
            formData.append('file', file);

            try {
                // Upload the file
                const response = await uploadFileWithProgress(formData);
                
                if (response.success) {
                    // Start polling for processing status
                    document.getElementById('processingStatus').style.display = 'block';
                    await pollProcessingStatus(response.conversation_id);
                } else {
                    throw new Error(response.error || 'Upload failed');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error: ' + error.message);
                resetForm();
            }
        });

        // Function to handle file upload with progress
        async function uploadFileWithProgress(formData) {
            return new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                
                // Handle upload progress
                xhr.upload.addEventListener('progress', (event) => {
                    if (event.lengthComputable) {
                        const percentComplete = (event.loaded / event.total) * 100;
                        updateUploadProgress(percentComplete);
                    }
                });

                // Handle upload completion
                xhr.addEventListener('load', () => {
                    if (xhr.status === 200) {
                        try {
                            const response = JSON.parse(xhr.responseText);
                            resolve(response);
                        } catch (error) {
                            reject(new Error('Invalid response format'));
                        }
                    } else {
                        reject(new Error(`Upload failed: ${xhr.statusText}`));
                    }
                });

                // Handle upload error
                xhr.addEventListener('error', () => {
                    reject(new Error('Upload failed'));
                });

                // Handle upload abort
                xhr.addEventListener('abort', () => {
                    reject(new Error('Upload cancelled'));
                });

                // Send the request
                xhr.open('POST', '/upload');
                xhr.send(formData);

                // Store XHR object for potential cancellation
                document.getElementById('cancelUpload').onclick = () => {
                    xhr.abort();
                    resetForm();
                };
            });
        }

        // Function to poll processing status
        async function pollProcessingStatus(conversationId) {
            let attempts = 0;
            const maxAttempts = 60;
            
            const processingProgress = document.getElementById('processingProgress');
            const processingMessage = document.getElementById('processingMessage');
            const hexagonLoader = document.getElementById('hexagonLoader');
            const processingStatus = document.getElementById('processingStatus');
            
            // Show both containers
            processingStatus.style.display = 'block';
            hexagonLoader.style.display = 'block';

            while (attempts < maxAttempts) {
                try {
                    const response = await fetch(`/api/conversation/${conversationId}/status`);
                    const data = await response.json();
                    
                    if (data.status === 'completed') {
                        processingProgress.style.width = '100%';
                        processingProgress.textContent = '100%';
                        processingMessage.textContent = 'Processing complete!';
                        hexagonLoader.style.display = 'none';
                        
                        // Redirect to conversation page
                        window.location.href = `/conversation/${conversationId}`;
                        return;
                    } else if (data.status === 'error') {
                        hexagonLoader.style.display = 'none';
                        throw new Error(data.error || 'Processing failed');
                    } else {
                        // Update progress based on status
                        const progress = calculateProgress(data.status);
                        processingProgress.style.width = `${progress}%`;
                        processingProgress.textContent = `${progress}%`;
                        processingMessage.textContent = getStatusMessage(data.status);
                    }
                } catch (error) {
                    console.error('Error polling status:', error);
                    processingMessage.textContent = 'Error checking status: ' + error.message;
                    hexagonLoader.style.display = 'none';
                    break;
                }

                await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds
                attempts++;
            }

            if (attempts >= maxAttempts) {
                processingMessage.textContent = 'Processing is taking longer than expected. Please check the dashboard for updates.';
                hexagonLoader.style.display = 'none';
            }
        }

        // Function to update upload progress
        function updateUploadProgress(percent) {
            const progress = Math.round(percent);
            const progressBar = document.getElementById('uploadProgress');
            progressBar.style.width = `${progress}%`;
            progressBar.textContent = `${progress}%`;
        }

        // Function to calculate progress based on status
        function calculateProgress(status) {
            const progressMap = {
                'queued': 10,
                'processing': 50,
                'analyzing': 75
            };
            return progressMap[status] || 0;
        }

        // Function to get status message
        function getStatusMessage(status) {
            const messageMap = {
                'queued': 'Waiting in queue...',
                'processing': 'Processing audio...',
                'analyzing': 'Analyzing content...'
            };
            return messageMap[status] || 'Processing...';
        }

        // Function to reset form
        function resetForm() {
            document.getElementById('uploadForm').reset();
            document.getElementById('statusContainer').style.display = 'none';
            document.getElementById('cancelUpload').style.display = 'none';
            document.getElementById('uploadButton').disabled = false;
            document.getElementById('uploadProgress').style.width = '0%';
            document.getElementById('uploadProgress').textContent = '0%';
            document.getElementById('processingStatus').style.display = 'none';
        }
    </script>
</body>
</html> 